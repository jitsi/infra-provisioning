AWSTemplateFormatVersion: 2010-09-09
Description: "EXAMPLE TEMPLATE, NO VALUES IN THIS DOCUMENT ARE USED IN ANY ACTUAL DEPLOYMENTS.  This template should be adapted to create a template for internal-repo.jitsi.net ELB and autoscaling group"
Parameters:
  InstanceType:
    Type: String
    Description: The EC2 instance type for the instances.
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.8xlarge
    ConstraintDescription: Choose an instance type.
    Default: t3.medium
  ServerCount:
    Description:
      Count of servers to launch
    Type: Number
    Default: 1
    ConstraintDescription: Server count must be at least 1
  Image:
    Description:
      The AMI to use when launching server nodes.
    Type: String
  VPCId:
    Description:
      The VPC id to launch in
    Type: String
  PrivateSubnetIds:
    Description:
      Subnets to launch the servers in
    Type: CommaDelimitedList
  PublicSubnetIds:
    Description:
      Subnets to launch the ELB in
    Type: CommaDelimitedList
  HostedZoneName:
    Description:
      The domain name for Route53 DNS
    Type: String
    ConstraintDescription: Must must match SSL certificate
    Default: jitsi.net
  SSLCertificate:
    Description:
      ID of SSL certificate for ALB
    Type: String
    ConstraintDescription: Must be existing SSL certificate ID in region where ALB is deployed
    Default: f8d75932-3e02-47a0-895f-535602b1b6d3
  BastionSSHSecurityGroup:
    Description:
      The security group ID for the bastion ssh security group
    Type: String
    ConstraintDescription: Must be a security group
  CloudName:
    Description:
      The Name for the datacenter
    Type: String
  Environment:
    Description:
      Environment where stack is launched
    Type: String
    Default: "all"
    ConstraintDescription: Must match EC2 Tag Name requirements.
  EnvironmentType:
    Description: dev, stage, or prod
    AllowedValues:
      - dev
      - stage
      - prod
    Type: String
    Default: dev
  BootstrapS3Bucket:
    Type: String
    Description: S3 Bucket to collect bootstrap assets
    Default: "jitsi-bootstrap-assets"
  KeyName:
    Type: String
    Description: SSH key name
    Default: "video"
  GitBranch:
    Type: String
    Description: Git Branch for infra repo
    Default: "master"

Resources:
# lb security group
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Allow https from everything
        VpcId:
          Ref: VPCId
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
# security group
  ServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Allow traffic to servers
        VpcId:
          Ref: VPCId
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId:
            Ref: BastionSSHSecurityGroup
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId:
            Ref: LoadBalancerSecurityGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
        HealthCheckPath: '/'
        HealthCheckPort: 80
        HealthCheckProtocol: HTTP
        Name: !Sub "internal-repo-${CloudName}-tg"
        Port: 80
        Protocol: HTTP
        VpcId: !Ref VPCId

# launch config
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: false
      IamInstanceProfile: InternalRepoRole
      ImageId: !Ref Image
      SecurityGroups:
      - Ref: ServerSecurityGroup
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          EXIT_CODE=0
          PYTHON_MAJOR=$(python -c 'import platform; print(platform.python_version())' | cut -d '.' -f1)
          PYTHON_IS_3=false
          if [[ "$PYTHON_MAJOR" -eq 3 ]]; then
            PYTHON_IS_3=true
          fi
          if $PYTHON_IS_3; then
            CFN_FILE="aws-cfn-bootstrap-py3-latest.tar.gz"
          else
            CFN_FILE="aws-cfn-bootstrap-latest.tar.gz"
          fi
          wget -P /root https://s3.amazonaws.com/cloudformation-examples/$CFN_FILE &&
          mkdir -p /root/aws-cfn-bootstrap-latest &&
          tar xvfz /root/$CFN_FILE --strip-components=1 -C /root/aws-cfn-bootstrap-latest &&
          easy_install /root/aws-cfn-bootstrap-latest/ &&
          echo "[Boto]" > /etc/boto.cfg && echo "use_endpoint_heuristics = True" >> /etc/boto.cfg

          tmp_msg_file="/tmp/cfn_signal_message"
          /usr/local/bin/aws s3 cp s3://${BootstrapS3Bucket}/vault-password /root/.vault-password
          /usr/local/bin/aws s3 cp s3://${BootstrapS3Bucket}/id_rsa_jitsi_deployment /root/.ssh/id_rsa
          chmod 400 /root/.ssh/id_rsa
          export CLOUD_NAME="${CloudName}"
          export CLOUD_PROVIDER="aws"
          export GIT_BRANCH="${GitBranch}"
          export AWS_REGION="${AWS::Region}"

          export DOMAIN="jitsi.net"
          export MY_IP=`curl -s http://169.254.169.254/latest/meta-data/local-ipv4`
          export MY_COMPONENT_ID="internal-repo-$(echo $MY_IP | awk -F. '{print $2"-"$3"-"$4}')"
          export MY_HOSTNAME="$MY_COMPONENT_ID.$DOMAIN"
          hostname $MY_HOSTNAME

          echo "$MY_IP $MY_HOSTNAME" >> /etc/hosts
          echo "$MY_HOSTNAME" > /etc/hostname
          export DEPLOY_TAGS="all"
          ansible-pull -v -U git@github.com:8x8Cloud/jitsi-video-infrastructure.git \
            -v \
            -d /tmp/bootstrap --purge \
            -i "127.0.0.1," \
            --vault-password-file=/root/.vault-password \
            --accept-host-key \
            -C "$GIT_BRANCH" \
            --tags "$DEPLOY_TAGS" \
            --extra-vars "hcv_environment=$ENVIRONMENT" --extra-vars "cloud_name=$CLOUD_NAME" --extra-vars "cloud_provider=$CLOUD_PROVIDER" \
            --extra-vars "region=$AWS_REGION" \
            ansible/configure-internal-repo.yml >> /var/log/bootstrap.log || EXIT_CODE=1

          if [ $EXIT_CODE -eq 1 ]; then echo 'Provisioning stage failed' > $tmp_msg_file; /usr/local/bin/dump-boot.sh; fi;

          if [ ! -f /tmp/cfn_signal_message ]; then err_message='Server configuration';else err_message=$(cat $tmp_msg_file);fi

          # Send signal about finishing configuring server
          /usr/local/bin/cfn-signal -e $EXIT_CODE -r "$err_message" --resource ServerGroup --stack "${AWS::StackName}" --region "${AWS::Region}" || true
          if [ ! $EXIT_CODE -eq 0 ]; then shutdown -h now;fi

# load balancer

  LoadBalancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
          IpAddressType: dualstack
          Subnets: !Ref PublicSubnetIds
          SecurityGroups:
          - Ref: LoadBalancerSecurityGroup
        Tags:
          - Key: Name
            Value: !Sub "ELB-internal-repo-${CloudName}"
          - Key: environment
            Value: !Ref Environment
          - Key: Environment
            Value: !Ref EnvironmentType
          - Key: Owner
            Value: Meetings
          - Key: Team
            Value: meet@8x8.com
          - Key: Product
            Value: meetings

  HTTPlistener:
      Type: "AWS::ElasticLoadBalancingV2::Listener"
      Properties:
          DefaultActions:
          - Type: "redirect"
            RedirectConfig:
              Protocol: "HTTPS"
              Port: "443"
              Host: "#{host}"
              Path: "/#{path}"
              Query: "#{query}"
              StatusCode: "HTTP_301"
          LoadBalancerArn: !Ref LoadBalancer
          Port: 80
          Protocol: "HTTP"
  HTTPSlistener:
      Type: "AWS::ElasticLoadBalancingV2::Listener"
      Properties:
        Certificates:
          - CertificateArn: !Sub "arn:aws:acm:${AWS::Region}:${AWS::AccountId}:certificate/${SSLCertificate}"
        DefaultActions:
          - Type: "forward"
            TargetGroupArn: !Ref TargetGroup
        LoadBalancerArn: !Ref LoadBalancer
        Port: 443
        Protocol: "HTTPS"

# Route53 CNAME for load balancer
  LoadBalancerDNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Sub "${HostedZoneName}."
      Comment: !Sub "Internal Repo ALB in ${CloudName}"
      RecordSets:
      - Name: !Join ["", ["internal-repo-",!Ref CloudName,".",!Ref HostedZoneName]]
        Type: A
        AliasTarget:
          HostedZoneId: !GetAtt 'LoadBalancer.CanonicalHostedZoneID'
          DNSName: !GetAtt 'LoadBalancer.DNSName'

# autoscaling group
  ServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref PrivateSubnetIds
      LaunchConfigurationName: !Ref LaunchConfig
      DesiredCapacity: !Ref ServerCount
      MinSize: !Ref ServerCount
      MaxSize: !Ref ServerCount
      TargetGroupARNs:
        - Ref: TargetGroup
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: !Sub "internal-repo-${CloudName}"
        - Key: environment
          PropagateAtLaunch: true
          Value: !Ref Environment
        - Key: shard-role
          PropagateAtLaunch: true
          Value: "repo"
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: Owner
          Value: Meetings
        - Key: Team
          Value: meet@8x8.com
        - Key: Product
          Value: meetings
    CreationPolicy:
      ResourceSignal:
        Count: !Ref ServerCount
        Timeout: PT30M

Outputs:
  ALBDNS:
    Description: DNS for ALB
    Value: !GetAtt LoadBalancer.DNSName
  Route53DNS:
      Description: DNS for ALB
      Value: !Join ["", ["internal-repo-",!Ref CloudName,".",!Ref HostedZoneName]]