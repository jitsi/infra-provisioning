def checkSkipBuild() {
    echo "checking for existing images before building, FORCE_BUILD_IMAGE is ${env.FORCE_BUILD_IMAGE}"
    def checkOutput = sh(
        returnStdout: true,
        script: """#!/bin/bash
        export IMAGE_TYPE="JavaJibri"
        export CLOUDS=\$(scripts/release_clouds.sh \$ENVIRONMENT)
        SKIP_BUILD=false
        if [[ "\$FORCE_BUILD_IMAGE" != "true" ]]; then
            scripts/check-build-oracle-image-for-clouds.sh 1>&2 && SKIP_BUILD=true
        fi
        if \$SKIP_BUILD; then
            echo 'skip'
        fi"""
    ).trim()
    echo checkOutput;
    return (checkOutput == 'skip');
}

def createJibriImageOracle() {
    sh(
        script: """#!/bin/bash
        export CLOUDS=\$(scripts/release_clouds.sh \$ENVIRONMENT)
        export FORCE_BUILD_IMAGE=true
        scripts/build-java-jibri-oracle.sh ubuntu
        if [ \$? -eq 0 ]; then
            echo "Image creation successful"
        else
            echo "Failed to create image, skipping replication"
            exit 2
        fi"""
    )
}

def replicateImageOracle() {
    sh(
        script: """#!/bin/bash
        export IMAGE_TYPE="JavaJibri"
        export FORCE_BUILD_IMAGE=true
        # copy new image to root tenancy
        export DEST_COMPARTMENT_USE_TENANCY="true"
        scripts/replicate-image-oracle.sh
        exit \$?"""
    )
}

def skipCheck = false;

node {
  timestamps {
    stage('Prepare/Checkout') { // for display purposes
        script {
            def scmUrl = scm.getUserRemoteConfigs()[0].getUrl()
            dir('infra-configuration') {
                checkout([$class: 'GitSCM', branches: [[name: "origin/${VIDEO_INFRA_BRANCH}"]], extensions: [[$class: 'SubmoduleOption', disableSubmodules: false, parentCredentials: false, recursiveSubmodules: true, reference: '', trackingSubmodules: false]], userRemoteConfigs: [[credentialsId: 'video-infra', url: env.INFRA_CONFIGURATION_REPO]]])
            }
            dir('infra-customization') {
                git branch: env.VIDEO_INFRA_BRANCH, url: env.INFRA_CUSTOMIZATIONS_REPO, credentialsId: 'video-infra'
            }
            dir('infra-provisioning') {
                git branch: env.VIDEO_INFRA_BRANCH, url: scmUrl, credentialsId: 'video-infra'
            }
            sh 'cp -a infra-customization/* infra-configuration'
            sh 'cp -a infra-customization/* infra-provisioning'

        }
    }
    stage('Provision') {
        dir('infra-provisioning') {
            withCredentials([
                file(credentialsId: 'oci-jenkins-config', variable: 'OCI_CLI_CONFIG_FILE'),
                file(credentialsId: 'oci-jenkins-pem', variable: 'OCI_CLI_KEY_FILE'),
                string(credentialsId: 'ansible-vault-password', variable: 'ANSIBLE_VAULT_PASSWORD_VALUE'),
                sshUserPrivateKey(credentialsId: 'ssh-ubuntu', keyFileVariable: 'CONNECTION_SSH_PRIVATE_KEY_FILE', usernameVariable: 'SSH_USERNAME')
            ]) {
                sh 'rm -rf ~/.oci'
                sh 'mkdir -p ~/.oci'
                sh 'cp "$OCI_CLI_CONFIG_FILE" ~/.oci/config'
                sh 'cp "$OCI_CLI_KEY_FILE" ~/.oci/private-key.pem'
                sh 'echo "$ANSIBLE_VAULT_PASSWORD_VALUE" > ./.vault-password.txt'
                skipCheck = checkSkipBuild()
                if (skipCheck == false) {

                    echo 'Oracle Jibri Image Creation'
                    createJibriImageOracle()
                    echo 'Oracle Jibri Image Replication'
                    replicateImageOracle()
                } else {
                    echo 'Skipping image creation, already exists'
                }
            }
        }
    }
  }
}
