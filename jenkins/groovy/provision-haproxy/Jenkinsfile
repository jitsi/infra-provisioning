def createHAProxyStackAWS() {
    sh(
        script: """#!/bin/bash
        export ENVIRONMENT=${env.ENVIRONMENT}
        export CLOUD_NAME=${env.CLOUD_NAME}
        export GIT_BRANCH=${env.RELEASE_BRANCH}
        export HAPROXY_RELEASE_NUMBER=${env.HAPROXY_RELEASE_NUMBER}
        scripts/create-haproxy-stack.sh ubuntu"""
    )
}
def createHAProxyStackOracle() {
    sh(
        script: """#!/bin/bash
        export USER_PUBLIC_KEY_PATH=~/.ssh/ssh_key.pub
        ssh-keygen -y -f "\$USER_PRIVATE_KEY_PATH" > "\$USER_PUBLIC_KEY_PATH"
        export ENVIRONMENT=${env.ENVIRONMENT}
        export ORACLE_REGION=${env.ORACLE_REGION}
        export ORACLE_GIT_BRANCH=${env.RELEASE_BRANCH}
        export HAPROXY_RELEASE_NUMBER=${env.HAPROXY_RELEASE_NUMBER}
        terraform/haproxy-shards/create-haproxy-stack-oracle.sh ubuntu"""
    )
}

def utils
pipeline {
    agent any
    options {
        ansiColor('xterm')
        timestamps()
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
    }
    stages {
        stage('Prepare/Checkout') { // for display purposes
            steps {
                script {
                    // load utility function
                    def rootDir = pwd()
                    utils = load "${rootDir}/jenkins/groovy/Utils.groovy"
                    // checkout repos
                    utils.SetupRepos(env.VIDEO_INFRA_BRANCH)

                    // setup OCI credentials
                    utils.SetupOCI()

                    sh 'mkdir -p test-results'
                }
            }
        }
        stage ("HAProxy Stack Creation") {
            steps {
                script {
                    dir("infra-provisioning") {
                        if (env.CLOUD_PROVIDER == 'aws') {
                            withCredentials([
                                string(credentialsId: 'oci-jenkins-terraform-aws-secret', variable: 'AWS_SECRET_ACCESS_KEY'),
                                string(credentialsId: 'oci-jenkins-terraform-aws-id', variable: 'AWS_ACCESS_KEY_ID')
                            ]) {
                                createHAProxyStackAWS()
                            }
                        }
                        if (env.CLOUD_PROVIDER == 'oracle') {
                            withCredentials([
                                string(credentialsId: 'oci-jenkins-terraform-aws-secret', variable: 'AWS_SECRET_ACCESS_KEY'),
                                string(credentialsId: 'oci-jenkins-terraform-aws-id', variable: 'AWS_ACCESS_KEY_ID'),
                                sshUserPrivateKey(credentialsId: 'ssh-ubuntu', keyFileVariable: 'USER_PRIVATE_KEY_PATH',usernameVariable: 'SSH_USERNAME')
                            ]) {
                              utils.SetupSSH()
                              sshagent (credentials: ['ssh-ubuntu']) {
                                createHAProxyStackOracle()
                              }
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            archiveArtifacts artifacts: 'test-results/**', allowEmptyArchive: true
            // Clean up afterwards
            cleanWs()
        }
    }
}
