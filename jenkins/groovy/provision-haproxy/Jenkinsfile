def createHAProxyStackAWS() {
    sh(
        script: """#!/bin/bash
        export ENVIRONMENT=${env.ENVIRONMENT}
        export CLOUD_NAME=${env.CLOUD_NAME}
        export GIT_BRANCH=${env.RELEASE_BRANCH}
        export HAPROXY_RELEASE_NUMBER=${env.HAPROXY_RELEASE_NUMBER}
        scripts/create-haproxy-stack.sh ubuntu"""
    )
}
def createHAProxyStackOracle() {
    sh(
        script: """#!/bin/bash
        export USER_PUBLIC_KEY_PATH=~/.ssh/ssh_key.pub
        ssh-keygen -y -f "\$USER_PRIVATE_KEY_PATH" > "\$USER_PUBLIC_KEY_PATH"
        export ENVIRONMENT=${env.ENVIRONMENT}
        export ORACLE_REGION=${env.ORACLE_REGION}
        export ORACLE_GIT_BRANCH=${env.RELEASE_BRANCH}
        export HAPROXY_RELEASE_NUMBER=${env.HAPROXY_RELEASE_NUMBER}
        terraform/haproxy-shards/create-haproxy-stack-oracle.sh ubuntu"""
    )
}

pipeline {
    agent any
    options {
        ansiColor('xterm')
        timestamps()
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
    }
    stages {
        stage('Prepare/Checkout') { // for display purposes
            steps {
                script {
                    def scmUrl = scm.getUserRemoteConfigs()[0].getUrl()
                    dir('infra-customization') {
                        git branch: env.VIDEO_INFRA_BRANCH, url: env.INFRA_CUSTOMIZATIONS_REPO, credentialsId: 'video-infra'
                    }
                    dir('infra-configuration') {
                        git branch: env.VIDEO_INFRA_BRANCH, url: env.INFRA_CONFIGURATION_REPO, credentialsId: 'video-infra'
                    }
                    dir('infra-provisioning') {
                        git branch: env.VIDEO_INFRA_BRANCH, url: scmUrl, credentialsId: 'video-infra'
                    }

                    sh 'cp -a infra-customization/* infra-provisioning'
                    sh 'cp -a infra-customization/* infra-configuration'
                    sh 'mkdir -p test-results'
                    withCredentials([
                        file(credentialsId: 'oci-jenkins-config', variable: 'OCI_CLI_CONFIG_FILE'),
                        file(credentialsId: 'oci-jenkins-pem', variable: 'OCI_CLI_KEY_FILE'),
                        string(credentialsId: 'ansible-vault-password', variable: 'ANSIBLE_VAULT_PASSWORD_VALUE')
                    ]) {
                        sh '''#!/bin/bash
                        mkdir -p ~/.oci
                        cp "$OCI_CLI_CONFIG_FILE" ~/.oci/config
                        cp "$OCI_CLI_KEY_FILE" ~/.oci/private-key.pem'''
                        sh 'echo "$ANSIBLE_VAULT_PASSWORD_VALUE" > infra-provisioning/.vault-password.txt'
                        sh 'echo "$ANSIBLE_VAULT_PASSWORD_VALUE" > infra-configuration/.vault-password.txt'
                    }
                }
            }
        }
        stage ("HAProxy Stack Creation") {
            steps {
                script {
                    dir("infra-provisioning") {
                        if (env.CLOUD_PROVIDER == 'aws') {
                            withCredentials([
                                string(credentialsId: 'oci-jenkins-terraform-aws-secret', variable: 'AWS_SECRET_ACCESS_KEY'),
                                string(credentialsId: 'oci-jenkins-terraform-aws-id', variable: 'AWS_ACCESS_KEY_ID')
                            ]) {
                                createHAProxyStackAWS()
                            }
                        }
                        if (env.CLOUD_PROVIDER == 'oracle') {
                            withCredentials([
                                string(credentialsId: 'oci-jenkins-terraform-aws-secret', variable: 'AWS_SECRET_ACCESS_KEY'),
                                string(credentialsId: 'oci-jenkins-terraform-aws-id', variable: 'AWS_ACCESS_KEY_ID'),
                                sshUserPrivateKey(credentialsId: 'ssh-ubuntu', keyFileVariable: 'USER_PRIVATE_KEY_PATH',usernameVariable: 'SSH_USERNAME')
                            ]) {
                              sshagent (credentials: ['ssh-ubuntu']) {
                                createHAProxyStackOracle()
                              }
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            archiveArtifacts artifacts: 'test-results/**', allowEmptyArchive: true
            // Clean up afterwards
            cleanWs()
        }
    }
}
