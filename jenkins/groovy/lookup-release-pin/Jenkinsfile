
def lookupCustomerInfo(environment, customer_id) {
    echo 'calling payments-service'
    sh(
        script: "PAYMENTS_ACTION=GET_CUSTOMER ENVIRONMENT=${environment} CUSTOMER_ID=${customer_id} scripts/payments-service.sh ubuntu"
    )
}

pipeline {
    agent any
    options {
        ansiColor('xterm')
        timestamps()
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
    }
    stages {
        stage ("setup") {
            steps {
                script {
                    // load utility function
                    def rootDir = pwd()
                    utils = load "${rootDir}/jenkins/groovy/Utils.groovy"
                    // checkout repos
                    utils.SetupRepos(env.VIDEO_INFRA_BRANCH)

                    sh 'mkdir -p test-results'
                }
            }
        }        
        stage ("check that environment supports release backends") {
            steps {
                script {
                    dir("infra-provisioning") {
                        useReleaseBackends = utils.GetEnvironmentVar(env.ENVIRONMENT, "USE_RELEASE_BACKENDS")
                        echo useReleaseBackends
                        if (useReleaseBackends != 'true') {
                            error 'environment does not support tenant pinning'
                        }
                    }
                }
            }
        }
        stage ("get payments-service URL for this enviroment") {
            steps {
                script { 
                    dir("infra-provisioning") {
                        paymentsServiceURL = GetEnvironmentVar(env.ENVIRONMENT, "PAYMENTS_URL")
                        if (paymentsServiceURL != 'false') {
                            paymentsServiceDeployed = 'true'
                        }
                        echo 'payment service URL: ' + paymentsServiceURL
                        echo 'payment service deployed: ' + paymentsServiceDeployed
                    }
                }
            }
        }
        stage ("lookup customer info from payments-service") {
            when {
                allOf {
                    expression { useReleaseBackends == 'true' }
                    expression { paymentsServiceDeployed == 'true' }
                }
            }
            steps {
                script {
                    dir("infra-provisioning") {
                        withCredentials([
                            string(credentialsId: 'asap-jwt-kid-dev', variable: 'ASAP_JWT_KID_DEV'),
                            string(credentialsId: 'asap-jwt-kid-prod', variable: 'ASAP_JWT_KID_PROD'),
                            file(credentialsId: 'asap-jwt-key-dev', variable: 'ASAP_JWT_KEY_DEV'),
                            file(credentialsId: 'asap-jwt-key-prod', variable: 'ASAP_JWT_KEY_PROD')
                        ]) {
                            sshagent(credentials: ['ssh-ubuntu']) {
                                lookupCustomerInfo(env.ENVIRONMENT, env.CUSTOMER_ID)
                            }
                        }
                    }
                }
            }
        }
    }
}
