def getJitsiMeetTortureTag(baseurl) {
  def torturetag = sh(
    returnStdout: true,
    script: """#!/bin/bash
        BASE_HTML=\$(curl --silent --insecure ${baseurl}/base.html)
        WEB_FULL_VER=\$(echo \$BASE_HTML | sed 's|.*web-cdn.jitsi.net/||' | sed 's|/".*||')
        WEB_VER=\$(echo \$WEB_FULL_VER | sed 's|.*_|| ' | sed 's|\\..*||')

        set +x -a
        JITSI_MEET_VERSIONS=\$(apt-cache madison jitsi-meet| sort -r | awk '{print \$3;}' | cut -d'-' -f1,2,3)
        for item in \$JITSI_MEET_VERSIONS; do
            current_ver=\$(apt-cache show jitsi-meet=\$item | grep '^Depends:'  | cut -f2- -d: | cut -f2 -d,)
            if grep -q ".\${WEB_VER}-1" <<< "\$current_ver"; then
                BUILD_NUM=\$(echo \$item | sed -n "s/[0-9]*\\.[0-9]*\\.\\([0-9]*\\)-1/\\1/p")
                echo "jitsi-meet_\${BUILD_NUM}";
                break
            fi
        done
        set -x +a
        [ -z "\$BUILD_NUM" ] && echo "master";""").trim();
  echo "Torture tag is ${torturetag}"
  return torturetag
}

def utils
def torture_user
def torture_secret
def torture_test_branch
pipeline {
    agent any
    options {
      ansiColor('xterm')
      timestamps()
      buildDiscarder(logRotator(daysToKeepStr: '14'))
    }
    stages {
        stage ("setup") {
            steps {
                script {
                    // load utility function
                    def rootDir = pwd()
                    utils = load "${rootDir}/jenkins/groovy/Utils.groovy"
                    // checkout repos
                    utils.SetupRepos(env.VIDEO_INFRA_BRANCH)
                }
            }
        }  
        stage ("load github credentials") {
            steps {
                script {
                    dir("infra-configuration") {
                        withCredentials([
                            string(credentialsId: 'ansible-vault-password', variable: 'ANSIBLE_VAULT_PASSWORD_PATH')
                        ]) {
                            utils.SetupAnsible()
                            torture_user = sh(
                                returnStdout: true,
                                script: """#!/bin/bash
                                ENCRYPTED_CREDENTIALS_FILE=ansible/secrets/torture.yml
                                echo \$(ansible-vault view \$ENCRYPTED_CREDENTIALS_FILE --vault-password .vault-password.txt | yq eval ".torture_github_user" -)"""
                            ).trim()
                            torture_secret = sh(
                                returnStdout: true,
                                script: """#!/bin/bash
                                ENCRYPTED_CREDENTIALS_FILE=ansible/secrets/torture.yml
                                echo \$(ansible-vault view \$ENCRYPTED_CREDENTIALS_FILE --vault-password .vault-password.txt | yq eval ".torture_github_token" -)"""
                            ).trim()
                        }
                    }
                }
            }
        }
        stage ("get torture test branch") {
          steps {
            script {
              dir('infra-configuration') {
                echo "ttb: ${env.TORTURE_TEST_BRANCH}"
                try {
                  if (env.TORTURE_TEST_BRANCH == '') {
                    torture_test_branch = getJitsiMeetTortureTag(env.BASE_URL)
                  } else {
                    torture_test_branch = env.TORTURE_TEST_BRANCH
                  }
                } catch (Exception e) {
                  echo "Error getting torture test branch: ${e}"
                }
                echo "ttb: ${torture_test_branch}"
              }
            }
          }
        }
        stage ("clone torture test repo") {
            steps {
                script {
                    dir('jitsi-meet-torture') {
                        try {
                            git branch: torture_test_branch, url: env.TORTURE_TEST_REPO, credentialsId: 'video-infra'
                        } catch (hudson.AbortException e) {
                            if (e.toString().contains('Couldn\'t find any revision to build')) {
                                echo "WARNING: couldn't find branch ${branch} in torture test repo, falling back to master"
                                git branch: 'master', url: env.TORTURE_TEST_REPO, credentialsId: 'video-infra'
                            }
                        }
                    }
                }
            }
        }
        stage ("run longlived conference test") {
            steps {
                script {
                    dir("infra-provisioning") {
                        withCredentials([
                            string(credentialsId: 'jenkins-aws-secret', variable: 'AWS_SECRET_ACCESS_KEY'),
                            string(credentialsId: 'jenkins-aws-id', variable: 'AWS_ACCESS_KEY_ID'),
                            string(credentialsId: 'asap-client-jwt-kid-meet', variable: 'ASAP_CLIENT_JWT_KID_MEET'),
                            string(credentialsId: 'asap-client-jwt-kid-beta', variable: 'ASAP_CLIENT_JWT_KID_BETA'),
                            string(credentialsId: 'asap-client-jwt-kid-prod', variable: 'ASAP_CLIENT_JWT_KID_PROD'),
                            string(credentialsId: 'asap-client-jwt-kid-stage', variable: 'ASAP_CLIENT_JWT_KID_STAGE'),
                            file(credentialsId: 'asap-client-jwt-key-meet', variable: 'ASAP_CLIENT_JWT_KEY_MEET'),
                            file(credentialsId: 'asap-client-jwt-key-prod', variable: 'ASAP_CLIENT_JWT_KEY_PROD'),
                            file(credentialsId: 'asap-client-jwt-key-stage', variable: 'ASAP_CLIENT_JWT_KEY_STAGE'),
                            file(credentialsId: 'asap-client-jwt-key-beta', variable: 'ASAP_CLIENT_JWT_KEY_BETA'),
                            sshUserPrivateKey(credentialsId: 'ssh-ubuntu', keyFileVariable: 'CONNECTION_SSH_PRIVATE_KEY_FILE', usernameVariable: 'SSH_USERNAME')
                        ]) {
                            sshagent (credentials: ['ssh-ubuntu']) {
                                sh(
                                    script: """#!/bin/bash
                                    set +x
                                    TORTURE_GITHUB_USER=${torture_user} TORTURE_GITHUB_TOKEN=${torture_secret} scripts/synthetic-longlived-test.sh"""
                                )
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            junit 'jitsi-meet-torture/target/*/xml/*.xml'
            archiveArtifacts artifacts: 'jitsi-meet-torture/target/*/xml/*.xml', fingerprint: true
        }
        cleanup {
            cleanWs()
        }
    }
}
