def utils
def torture_user
def torture_secret
pipeline {
    agent any
     stages {
        stage ("setup") {
            steps {
                script {
                    // load utility function
                    def rootDir = pwd()
                    utils = load "${rootDir}/jenkins/groovy/Utils.groovy"
                    // checkout repos
                    utils.SetupRepos(env.VIDEO_INFRA_BRANCH)
                }
            }
        }  
        stage ("extract torture test github credentials") {
            steps {
                script {
                    dir("infra-configuration") {
                        withCredentials([
                            string(credentialsId: 'ansible-vault-password', variable: 'ANSIBLE_VAULT_PASSWORD_PATH')
                        ]) {
                            utils.SetupAnsible()
                            torture_user = sh(
                                returnStdout: true,
                                script: """#!/bin/bash
                                ENCRYPTED_CREDENTIALS_FILE=ansible/secrets/torture.yml
                                echo \$(ansible-vault view \$ENCRYPTED_CREDENTIALS_FILE --vault-password .vault-password.txt | yq eval ".torture_github_user" -)"""
                            ).trim()
                            torture_secret = sh(
                                returnStdout: true,
                                script: """#!/bin/bash
                                ENCRYPTED_CREDENTIALS_FILE=ansible/secrets/torture.yml
                                echo \$(ansible-vault view \$ENCRYPTED_CREDENTIALS_FILE --vault-password .vault-password.txt | yq eval ".torture_github_token" -)"""
                            ).trim()
                        }
                    }
                }
            }

        }
        stage ("run longlived conference test") {
            steps {
                script {
                    dir("infra-provisioning") {
                        withCredentials([
                            string(credentialsId: 'jenkins-aws-secret', variable: 'AWS_SECRET_ACCESS_KEY'),
                            string(credentialsId: 'jenkins-aws-id', variable: 'AWS_ACCESS_KEY_ID'),
                            string(credentialsId: 'torture-github-user', variable: 'TORTURE_GITHUB_USER'),
                            string(credentialsId: 'torture-github-token', variable: 'TORTURE_GITHUB_TOKEN'),
                            sshUserPrivateKey(credentialsId: 'ssh-ubuntu', keyFileVariable: 'CONNECTION_SSH_PRIVATE_KEY_FILE', usernameVariable: 'SSH_USERNAME')
                        ]) {
                            sshagent (credentials: ['ssh-ubuntu']) {
                                sh(
                                    script: "TORTURE_GITHUB_USER=${torture_user} TORTURE_GITHUB_TOKEN=${torture_secret} scripts/synthetic-longlived-test.sh"
                                )
                            }
                        }
                    }
                }
            }
        }
     }
     post {
        always {
            cleanWs()
        }
    }
}
