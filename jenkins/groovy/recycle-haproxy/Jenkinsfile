
def recycleHaproxyAWS() {
    sh(
        script: "scripts/recycle-haproxy.sh ubuntu"
    )
}

def recycleHaproxyOracle() {
    sh(
        script: """#!/bin/bash
        export ANSIBLE_FORCE_COLOR=True
        scripts/recycle-haproxy-oracle.sh ubuntu"""
    )
}
def utils
pipeline {
    agent any
    options {
        timestamps()
        ansiColor('xterm')
    }
    stages {
        // output stage, shows off our input parameters
        stage ("setup") {
            steps {
                script {
                    // load utility function
                    def rootDir = pwd()
                    utils = load "${rootDir}/jenkins/groovy/Utils.groovy"
                    // checkout repos
                    utils.SetupRepos(env.VIDEO_INFRA_BRANCH)

                    // setup OCI credentials
                    utils.SetupOCI()
                    sh 'mkdir -p test-results'
                    sh 'mkdir -p haproxy-status'
                }
            }
        }
        stage ("haproxy recycle") {
            steps {
                script {
                    lock("haproxy-state-${env.ENVIRONMENT}") {
                      echo 'haproxy recycle beginning'
                      dir('infra-provisioning') {
                        if (env.CLOUD_PROVIDER == 'aws') {
                            withCredentials([
                                string(credentialsId: 'jenkins-aws-secret', variable: 'AWS_SECRET_ACCESS_KEY'),
                                string(credentialsId: 'jenkins-aws-id', variable: 'AWS_ACCESS_KEY_ID')
                            ]) {
                                recycleHaproxyAWS()
                            }
                        }
                        if (env.CLOUD_PROVIDER == 'oracle') {
                          sshagent (credentials: ['ssh-ubuntu']) {
                            withCredentials([
                                string(credentialsId: 'jenkins-aws-secret', variable: 'AWS_SECRET_ACCESS_KEY'),
                                string(credentialsId: 'jenkins-aws-id', variable: 'AWS_ACCESS_KEY_ID')
                            ]) {
                                recycleHaproxyOracle()
                            }
                          }
                        }
                      }
                    }
                }
            }
        }
     }
    post {
        always {
            archiveArtifacts artifacts: 'test-results/**', allowEmptyArchive: false
            // Clean up afterwards
            cleanWs()
        }
    }
}
