def myRelease

def oldReleasesFromEnvironment(environment, latestRelease) {
    echo "Searching for old releases not matching $latestRelease"
    def releases = sh(
        returnStdout: true,
        script: """#!/bin/bash
            export ENVIRONMENT="${environment}"
            scripts/shard.sh list_releases ubuntu"""
    ).trim().split(' ');
    def oldReleases = releases.findAll{!it.equals(latestRelease)}
    echo "Found old releases: $oldReleases"
    return oldReleases
}

def utils
pipeline {				//indicate the job is written in Declarative Pipeline
    agent any				//agent specifies where the pipeline will execute. 
    options {
        ansiColor('xterm')
        timestamps()
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
    }
    stages {
        // output stage, shows off our input parameters
        stage('Prepare/Checkout') {
            steps {
                echo 'Jitsi Build Pipeline Begninning'
                sh '''echo JVB VERSION ${JVB_VERSION}'''
                sh '''echo JICOFO VERSION ${JICOFO_VERSION}'''
                sh '''echo JITSI MEET VERSION ${JITSI_MEET_VERSION}'''
                script {
                    // load utility function
                    def rootDir = pwd()
                    utils = load "${rootDir}/jenkins/groovy/Utils.groovy"
                    // checkout repos
                    utils.SetupRepos(env.VIDEO_INFRA_BRANCH)

                    // setup OCI credentials
                    utils.SetupOCI()
                }
            }
        }
        stage ("build") {		//an arbitrary stage name
            parallel {
              stage ("build JVB oracle") {		//an arbitrary stage name
                steps {
                    script {
                        def image_arch = utils.ImageArchFromShape(env.JVB_SHAPE)
                        build job: 'build-image-oracle',parameters: [
                                [$class: 'StringParameterValue', name: 'IMAGE_TYPE', value: 'JVB'],
                                [$class: 'StringParameterValue', name: 'JVB_VERSION', value: params.JVB_VERSION],
                                [$class: 'StringParameterValue', name: 'ENVIRONMENT', value: params.ENVIRONMENT],
                                [$class: 'StringParameterValue', name: 'IMAGE_ARCH', value: image_arch],
                                [$class: 'BooleanParameterValue', name: 'FORCE_BUILD_IMAGE', value: (params.FORCE_BUILD_IMAGE=='true')],
                                [$class: 'StringParameterValue', name: 'VIDEO_INFRA_BRANCH', value: env.VIDEO_INFRA_BRANCH]
                            ]
                    }
                }
              }
              stage ("build Signal Oracle") {		//an arbitrary stage name
                steps {
                    script {
                        def image_arch = utils.ImageArchFromShape(env.SHAPE)
                        build job: 'build-image-oracle',parameters: [
                            [$class: 'StringParameterValue', name: 'IMAGE_TYPE', value: 'Signal'],
                            [$class: 'StringParameterValue', name: 'IMAGE_ARCH', value: image_arch],
                            [$class: 'StringParameterValue', name: 'JITSI_MEET_VERSION', value: params.JITSI_MEET_VERSION],
                            [$class: 'StringParameterValue', name: 'JICOFO_VERSION', value: params.JICOFO_VERSION],
                            [$class: 'StringParameterValue', name: 'PROSODY_VERSION', value: params.PROSODY_VERSION],
                            [$class: 'StringParameterValue', name: 'ENVIRONMENT', value: params.ENVIRONMENT],
                            [$class: 'BooleanParameterValue', name: 'FORCE_BUILD_IMAGE', value: (params.FORCE_BUILD_IMAGE=='true')],
                            [$class: 'StringParameterValue', name: 'VIDEO_INFRA_BRANCH', value: env.VIDEO_INFRA_BRANCH]
                        ]
                    }
                }
              }
        }
        }
        stage ("release") {		//an arbitrary stage name
        	environment {
                SIGNAL_VERSION = "${params.JICOFO_VERSION}-${params.JITSI_MEET_VERSION}-${params.PROSODY_VERSION}"
        	}
            steps {
                dir('infra-provisioning') {
                    withCredentials([
                        string(credentialsId: 'jenkins-aws-secret', variable: 'AWS_SECRET_ACCESS_KEY'),
                        string(credentialsId: 'jenkins-aws-id', variable: 'AWS_ACCESS_KEY_ID')                            
                    ]) {
                        sshagent (credentials: ['ssh-ubuntu']) {
                            script {
                                def releaseJob = build job: 'release-core',parameters: [
                                    [$class: 'StringParameterValue', name: 'CLOUD_PROVIDER', value: params.CLOUD_PROVIDER],
                                    [$class: 'StringParameterValue', name: 'CORE_CLOUD_PROVIDER', value: params.CORE_CLOUD_PROVIDER],
                                    [$class: 'StringParameterValue', name: 'JVB_VERSION', value: params.JVB_VERSION],
                                    [$class: 'StringParameterValue', name: 'JVB_SHAPE', value: params.JVB_SHAPE],
                                    [$class: 'StringParameterValue', name: 'SHAPE', value: params.SHAPE],
                                    [$class: 'StringParameterValue', name: 'SIGNAL_VERSION', value: env.SIGNAL_VERSION],
                                    [$class: 'StringParameterValue', name: 'ENVIRONMENT', value: env.ENVIRONMENT],
                                    [$class: 'StringParameterValue', name: 'VIDEO_INFRA_BRANCH', value: env.VIDEO_INFRA_BRANCH]
                                ]
                                myRelease = releaseJob.getNumber();
                                build job: 'set-release-ga',parameters: [
                                    [$class: 'StringParameterValue', name: 'RELEASE_NUMBER', value: myRelease.toString()],
                                    [$class: 'StringParameterValue', name: 'ENVIRONMENT', value: env.ENVIRONMENT],
                                    [$class: 'StringParameterValue', name: 'VIDEO_INFRA_BRANCH', value: env.VIDEO_INFRA_BRANCH]
                                ]
                            }
                        }
                    }
                }
            }
        }
        stage ("cleanup") {		//an arbitrary stage name
            steps {
                dir('infra-provisioning') {
                    withCredentials([
                        string(credentialsId: 'jenkins-aws-secret', variable: 'AWS_SECRET_ACCESS_KEY'),
                        string(credentialsId: 'jenkins-aws-id', variable: 'AWS_ACCESS_KEY_ID')                            
                    ]) {
                        sshagent (credentials: ['ssh-ubuntu']) {
                            script {
                                def OLD_RELEASES = oldReleasesFromEnvironment(env.ENVIRONMENT, myRelease.toString()).join(' ')
                                build job: 'destroy-release-core',parameters: [
                                    [$class: 'StringParameterValue', name: 'RELEASE_NUMBER', value: OLD_RELEASES],
                                    [$class: 'StringParameterValue', name: 'ENVIRONMENT', value: env.ENVIRONMENT],
                                    [$class: 'StringParameterValue', name: 'VIDEO_INFRA_BRANCH', value: env.VIDEO_INFRA_BRANCH]
                                ]
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        fixed {
            slackSend color: "good", message: "Successfully fixed build of ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)\nSignal ${params.JICOFO_VERSION}-${params.JITSI_MEET_VERSION}-${params.PROSODY_VERSION} JVB  ${params.JVB_VERSION} ${env.ENVIRONMENT}"
        }
        failure {
            slackSend color: "danger", message: "Failure in build of build of ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)\nSignal ${params.JICOFO_VERSION}-${params.JITSI_MEET_VERSION}-${params.PROSODY_VERSION} JVB  ${params.JVB_VERSION} ${env.ENVIRONMENT}"
        }
    }
}