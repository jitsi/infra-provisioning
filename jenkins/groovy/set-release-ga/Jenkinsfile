def checkReleaseBackends(environment) {
    def ret = 'false';

    def useReleaseBackends = sh(
       returnStdout: true,
       script: """#!/bin/bash
. ./sites/${environment}/stack-env.sh
echo \$USE_RELEASE_BACKENDS"""
    ).trim();

    if (useReleaseBackends.length() > 0) {
        ret = useReleaseBackends;
    }

    return ret;
}

def setReleaseGA(environment) {
    def setReleaseResult = sh(
        returnStatus: true,
        script: """#!/bin/bash
ENVIRONMENT=${environment} scripts/set-release-ga.sh ubuntu
"""
    )
    if (setReleaseResult != 0) {
        return 'false';
    }
    return 'true';
}

def versioningManagerSetGA(environment, release_number) {
    sh(
        script: """#!/bin/bash
export VERSIONING_ACTION=SET_RELEASE_GA
export VERSIONING_RELEASE="${release_number}"
ENVIRONMENT=${environment} scripts/versioning-manager.sh
"""
    )
}

def addGAPoolsToScheduler(environment, release_number) {
    sh(
        script: """#!/bin/bash
. clouds/all.sh
if [ -z "\$ORACLE_REGIONS" ]; then
    echo "## addLiveLocalPoolsToScheduler failed to load ORACLE_REGIONS"
else
    for REGION in \$ORACLE_REGIONS; do
        JVB_GROUPS="\$(DEBUG=true ALL_RELEASES=true ORACLE_REGION=\${REGION} scripts/custom-autoscaler-list-groups.sh)"
        if [[ \${#JVB_GROUPS} != 0 ]]; then
            echo "## found jvb scaling groups for \${REGION}: \${JVB_GROUPS}"
        fi
        for GROUP in \$JVB_GROUPS; do
            if [[ "\$GROUP" =~ "JVB" ]] && [[ "\$GROUP" =~ "${release_number}" ]] && ([[ "\$GROUP" =~ "-local-" ]] || [[ "\$GROUP" =~ "-global-" ]]); then
                echo "## adding to scheduler: \${GROUP}"
                ENABLE_SCHEDULER=true ORACLE_REGION=\${REGION} GROUP_NAME=\${GROUP} TYPE=JVB scripts/custom-autoscaler-update-scaling-activities.sh
            else
                echo "## removing from scheduler: \${GROUP}"
                ENABLE_SCHEDULER=false ORACLE_REGION=\${REGION} GROUP_NAME=\${GROUP} TYPE=JVB scripts/custom-autoscaler-update-scaling-activities.sh
            fi
        done
    done
fi
"""
    )
}

pipeline {
    agent any
    options {
        ansiColor('xterm')
        timestamps()
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
    }
    stages {
        stage ("setup") {
            steps {
                script {
                    // load utility function
                    def rootDir = pwd()
                    utils = load "${rootDir}/jenkins/groovy/Utils.groovy"
                    // checkout repos
                    utils.SetupRepos(env.VIDEO_INFRA_BRANCH)

                    // setup OCI credentials
                    utils.SetupOCI()

                    sh 'mkdir -p test-results'
                }
            }
        }  
        stage ("load flags") {
            steps {
                script {
                    dir("infra-provisioning") {
                        useReleaseBackends = checkReleaseBackends(env.ENVIRONMENT)
                        echo useReleaseBackends
                    }
                }
            }
        }
        stage ("set release GA on haproxies then in consul") {
            steps {
                script {
                    echo 'setting release live'
                    lock("haproxy-state-${env.ENVIRONMENT}") {
                        dir("infra-provisioning") {
                            withCredentials([
                                file(credentialsId: 'oci-jenkins-config', variable: 'OCI_CLI_CONFIG_FILE'),
                                file(credentialsId: 'oci-jenkins-pem', variable: 'OCI_CLI_KEY_FILE'),
                                string(credentialsId: 'jenkins-aws-secret', variable: 'AWS_SECRET_ACCESS_KEY'),
                                string(credentialsId: 'jenkins-aws-id', variable: 'AWS_ACCESS_KEY_ID')
                            ]) {
                                sshagent (credentials: ['ssh-ubuntu']) {
                                    setReleaseSucceeded = setReleaseGA(env.ENVIRONMENT)
                                }
                            }
                        }
                    }
                    echo setReleaseSucceeded
                }
            }
        }
        stage ("set release GA in versioning manager") {
            when {
                expression { useReleaseBackends == 'true' }
                expression { setReleaseSucceeded == 'true' }
            }
            steps {
                script {
                    dir("infra-provisioning") {
                        withCredentials([
                            string(credentialsId: 'asap-jwt-kid-dev', variable: 'ASAP_JWT_KID_DEV'),
                            string(credentialsId: 'asap-jwt-kid-prod', variable: 'ASAP_JWT_KID_PROD'),
                            file(credentialsId: 'asap-jwt-key-dev', variable: 'ASAP_JWT_KEY_DEV'),
                            file(credentialsId: 'asap-jwt-key-prod', variable: 'ASAP_JWT_KEY_PROD')
                        ]) {
                            versioningManagerSetGA(env.ENVIRONMENT, env.RELEASE_NUMBER)
                        }
                    }
                }
            }
        }
        stage ("enable release JVB pools for use with autoscaler") {
            when {
                expression { setReleaseSucceeded == 'true' }
            }
            steps {
                script {
                    dir("infra-provisioning") {
                        withCredentials([
                            string(credentialsId: 'asap-jwt-kid-dev', variable: 'ASAP_JWT_KID_DEV'),
                            string(credentialsId: 'asap-jwt-kid-prod', variable: 'ASAP_JWT_KID_PROD'),
                            file(credentialsId: 'asap-jwt-key-dev', variable: 'ASAP_JWT_KEY_DEV'),
                            file(credentialsId: 'asap-jwt-key-prod', variable: 'ASAP_JWT_KEY_PROD')
                        ]) {
                            addGAPoolsToScheduler(env.ENVIRONMENT, env.RELEASE_NUMBER)
                        }
                    }
                }
            }
        }
     }
     post {
        always {
            cleanWs()
        }
        failure {
            slackSend color: "danger", message: "${env.JOB_NAME} - build ${env.BUILD_NUMBER} failed to set release ${env.RELEASE_NUMBER} as GA in ${env.ENVIRONMENT}"
        }
    }
}
