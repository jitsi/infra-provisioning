pipeline {
  agent any
  options {
    timestamps()
    ansiColor('xterm')
  }
  stages {
    stage('Prepare/Checkout') { // for display purposes
      steps {
        script {
            def scmUrl = scm.getUserRemoteConfigs()[0].getUrl()
            echo scmUrl
            echo env.VIDEO_INFRA_BRANCH
            dir('infra-configuration') {
                checkout([$class: 'GitSCM', branches: [[name: "origin/${VIDEO_INFRA_BRANCH}"]], extensions: [[$class: 'SubmoduleOption', disableSubmodules: false, parentCredentials: false, recursiveSubmodules: true, reference: '', trackingSubmodules: false]], userRemoteConfigs: [[credentialsId: 'video-infra', url: env.INFRA_CONFIGURATION_REPO]]])
            }
            dir('infra-customization') {
                git branch: env.VIDEO_INFRA_BRANCH, url: env.INFRA_CUSTOMIZATIONS_REPO, credentialsId: 'video-infra'
            }
            dir('infra-provisioning') {
                git branch: env.VIDEO_INFRA_BRANCH, url: scmUrl, credentialsId: 'video-infra'
            }
            withCredentials([
                file(credentialsId: 'oci-jenkins-config', variable: 'OCI_CLI_CONFIG_FILE'),
                file(credentialsId: 'oci-jenkins-pem', variable: 'OCI_CLI_KEY_FILE'),
                string(credentialsId: 'ansible-vault-password', variable: 'ANSIBLE_VAULT_PASSWORD_VALUE')
            ]) {
                sh '''#!/bin/bash
                mkdir -p ~/.oci
                cp "$OCI_CLI_CONFIG_FILE" ~/.oci/config
                cp "$OCI_CLI_KEY_FILE" ~/.oci/private-key.pem'''
                sh 'echo "$ANSIBLE_VAULT_PASSWORD_VALUE" > infra-provisioning/.vault-password.txt'
                sh 'echo "$ANSIBLE_VAULT_PASSWORD_VALUE" > infra-configuration/.vault-password.txt'
            }
            sh 'cp -a infra-customization/* infra-configuration'
            sh 'cp -a infra-customization/* infra-provisioning'
            sh 'rm -rf test-results'
            sh 'mkdir test-results'
        }
      }
    }
    stage('Provision') {
      steps {
        lock('validate-grid') {
          sshagent (credentials: ['ssh-ubuntu']) {
            dir('infra-provisioning') {
              sh """#!/bin/bash
              export ANSIBLE_FORCE_COLOR=True
              scripts/validate-shards.sh ${env.ENVIRONMENT} \"${env.SHARDS}\" ubuntu"""
            }
          }
        }
      }
    }
  }
  post {
    always {
        dir('test-results') {
            sh '''#!/bin/bash
                for i in *; do 
                cd \$i;
                for z in *.zip; do
                    unzip \$z
                done
                cd -
                done'''     
        }
        archiveArtifacts artifacts: 'test-results/**/*', fingerprint: true
        junit 'test-results/**/target/chrome-2-chrome/*.xml'
    }
    cleanup {
        cleanWs()
    }
  }
}
