def utils
def skipNomad = true;

pipeline {
    agent any
    options {
        ansiColor('xterm')
        timestamps()
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
    }
    stages {
        // output stage, shows off our input parameters
        stage ("setup") {
            steps {
                script {
                    // load utility function
                    def rootDir = pwd()
                    utils = load "${rootDir}/jenkins/groovy/Utils.groovy"
                    // checkout repos
                    utils.SetupRepos(env.VIDEO_INFRA_BRANCH)

                    // setup OCI credentials
                    utils.SetupOCI()
                }
            }
        }
        stage('Check Nomad Flag') {
            steps {
                script {
                    if (env.SELENIUM_GRID_NOMAD_ENABLED == "true") {
                        skipNomad = false;
                    } else {
                        dir('infra-provisioning') {
                            def nomadEnabled = utils.GetAnsibleVar(env.ENVIRONMENT, 'selenium_grid_nomad_enabled')
                            if (nomadEnabled == "true") {
                                skipNomad = false;
                            }
                        }          
                    }
                }
            }
        }
        stage ("selenium grid provisioning") {
            steps {
                script {
                    echo 'selenium provision beginning'
                    dir('infra-provisioning') {
                        withCredentials([
                            string(credentialsId: 'oci-jenkins-terraform-aws-secret', variable: 'AWS_SECRET_ACCESS_KEY'),
                            string(credentialsId: 'oci-jenkins-terraform-aws-id', variable: 'AWS_ACCESS_KEY_ID'),
                            sshUserPrivateKey(credentialsId: 'ssh-ubuntu', keyFileVariable: 'USER_PRIVATE_KEY_PATH', usernameVariable: 'SSH_USERNAME')
                        ]) {
                            sshagent (credentials: ['ssh-ubuntu']) {
                            utils.SetupSSH()
                            sh '''#!/bin/bash
                            export USER_PUBLIC_KEY_PATH=~/.ssh/ssh_key.pub
                            export ORACLE_GIT_BRANCH=\"$RELEASE_BRANCH\"
                            terraform/selenium-grid/create-selenium-grid-oracle.sh $SSH_USERNAME
                            '''
                            }
                        }
                    }
                }
            }
        }
        stage ("selenium grid nomad jobs") {
            when {
              expression {skipNomad == false}
            }
            steps {
                script {
                    echo 'selenium nomad jobs'
                    dir('infra-provisioning') {
                        withCredentials([
                            string(credentialsId: 'jenkins-aws-secret', variable: 'AWS_SECRET_ACCESS_KEY'),
                            string(credentialsId: 'jenkins-aws-id', variable: 'AWS_ACCESS_KEY_ID')
                        ]) {
                            sh '''#!/bin/bash
                                GRID=$GRID_NAME scripts/deploy-nomad-selenium-grid-hub.sh
                                GRID=$GRID_NAME scripts/deploy-nomad-selenium-grid-node.sh
                                RET=$?
                                if [[ $RET -eq 2 ]]; then
                                    echo "Complete but failed to place all allocation is expected here"
                                    exit 0
                                else
                                    exit $RET
                                fi
                            '''
                        }
                    }
                }
            }
        }
    }
}
