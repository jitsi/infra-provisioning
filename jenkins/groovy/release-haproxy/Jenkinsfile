def oracle_regions(cloud_list) {
    def oracle_regions=[]
    for(i = 0; i < cloud_list.size(); i++) {
        oracle_regions[i] = sh(
            returnStdout: true,
            script: """#!/bin/bash
                . clouds/${cloud_list[i]}.sh
                echo \$ORACLE_REGION"""
        )
    }
    return oracle_regions
}

// global var to track git branch from env or new tags
def git_branch

def tagExistingProxies(stack_environment,cloud_provider,haproxy_release_number,gitBranch) {
    sh """#!/bin/bash
        export CLOUD_PROVIDER=${cloud_provider}
        export ANSIBLE_FORCE_COLOR=True
        scripts/tag_haproxy.sh ${stack_environment} ${haproxy_release_number} ${gitBranch} ubuntu"""
}

// trigger create or update stack job with appropriate parameters
def createHAProxyStack(stack_environment,cloud_provider,cloud_name,oracle_region,haproxy_release_number,gitBranch,shape,ocpus,memoryInGbs) {
    def createStack = build job: 'provision-haproxy',parameters: [
        [$class: 'StringParameterValue', name: 'ENVIRONMENT', value: stack_environment],
        [$class: 'StringParameterValue', name: 'CLOUD_NAME', value: cloud_name.trim()],
        [$class: 'StringParameterValue', name: 'ORACLE_REGION', value: oracle_region.trim()],
        [$class: 'StringParameterValue', name: 'CLOUD_PROVIDER', value: cloud_provider],
        [$class: 'StringParameterValue', name: 'HAPROXY_RELEASE_NUMBER', value: haproxy_release_number],
        [$class: 'StringParameterValue', name: 'RELEASE_BRANCH', value: gitBranch],
        [$class: 'StringParameterValue', name: 'SHAPE', value: shape],
        [$class: 'StringParameterValue', name: 'OCPUS', value: ocpus],
        [$class: 'StringParameterValue', name: 'MEMORY_IN_GBS', value: memoryInGbs],
        [$class: 'StringParameterValue', name: 'VIDEO_INFRA_BRANCH', value: env.VIDEO_INFRA_BRANCH]
    ]

    return createStack
}

def utils
pipeline {				//indicate the job is written in Declarative Pipeline
    agent any				//agent specifies where the pipeline will execute. 
    options {
        ansiColor('xterm')
        timestamps()
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
    }
    stages {
        stage('Prepare/Checkout') { // for display purposes
            steps {
                script {
                    // load utility function
                    def rootDir = pwd()
                    utils = load "${rootDir}/jenkins/groovy/Utils.groovy"
                    // checkout repos
                    utils.SetupRepos(env.VIDEO_INFRA_BRANCH)

                    // setup OCI credentials
                    utils.SetupOCI()
                }
            }
        }
        // output stage, shows off our input parameters
        stage ("setup") {
            steps {
                script {
                    echo 'HAProxy Release Creation'
                }
            }
        }
        // tag the new release or load git_branch from input parameters
        stage("tag release") {
          steps {
            script {
                // use incoming branch/tag or tag repo with new tag based on build ID
                // either way set it into git_branch variable to use later
                git_branch = utils.TagRelease('haproxy-release',env.BUILD_ID, env.RELEASE_BRANCH)
                env.RELEASE_BRANCH = git_branch
            }
          }
        }
        // create or update stacks for the release
        stage("create stacks") {
            steps {
                script {
                    dir('infra-provisioning') {
                        echo "Create stacks in ${env.ENVIRONMENT} clouds ${env.CLOUDS}";
                        def cloud_list = utils.SplitClouds(env.ENVIRONMENT,env.CLOUDS);
                        def oracle_region = oracle_regions(cloud_list);
                        echo "cloud list ${cloud_list}";
                        def branches = [:]
                        for(i = 0; i < cloud_list.size(); i++) {
                            def curr = i
                            echo "pipeline branch ${curr} for stack in ${cloud_list[curr]}";
                            branches["Build ${cloud_list[curr]}"] = {
                                createHAProxyStack(env.ENVIRONMENT,
                                    env.CLOUD_PROVIDER,
                                    cloud_list[curr],
                                    oracle_region[curr],
                                    env.BUILD_ID,
                                    git_branch,
                                    env.SHAPE,
                                    env.OCPUS,
                                    env.MEMORY_IN_GBS
                                )
                            }
                        }
                        // branch out here, run all create jobs at once
                        // only succeed if all branches succeed
                        parallel branches
                    }
                }
            }
        }
        // update tags and clear caches for existing proxies
        stage ("tag existing proxies") {
            steps {
                script {
                    sshagent (credentials: ['ssh-ubuntu']) {
                        withCredentials([
                                string(credentialsId: 'jenkins-aws-secret', variable: 'AWS_SECRET_ACCESS_KEY'),
                                string(credentialsId: 'jenkins-aws-id', variable: 'AWS_ACCESS_KEY_ID')
                        ]) {
                            dir('infra-provisioning') {
                                tagExistingProxies(env.ENVIRONMENT,env.CLOUD_PROVIDER,env.BUILD_ID,git_branch)
                            }
                        }
                    }
                }
            }
        }
        // trigger configuration and rotation of load balancers to trigger reconfigure step using new branches
        stage ("rotate load balancers") {
            steps {
                script {
                    utils.ReconfigureHAProxy(env.ENVIRONMENT, env.VIDEO_INFRA_BRANCH)
                }
            }
        }
    }
}
