pipeline {
    agent any
    options {
        ansiColor('xterm')
        timestamps()
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
    }
    stages {
        stage ("setup") {
            steps {
                script {
                    // load utility function
                    def rootDir = pwd()
                    utils = load "${rootDir}/jenkins/groovy/Utils.groovy"
                    // checkout repos
                    utils.SetupRepos(env.VIDEO_INFRA_BRANCH)
                }
            }
        }
        stage ("set ban in consul") {
            steps {
                script {
                    echo 'setting bans'
                    dir("infra-provisioning") {
                        sshagent (credentials: ['ssh-ubuntu']) {
                            updateSucceeded = sh(
                                returnStatus: true,
                                script: """#!/bin/bash
                                scripts/set-banlist.sh ubuntu
                                """
                            )
                        }
                    }
                    if (updateSucceeded == 'false') {
                        error('set banlist failed')
                    }
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}
