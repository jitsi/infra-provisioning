def utils
def skipCheck = false;

pipeline {
  agent any
  options {
      ansiColor('xterm')
      timestamps()
      buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
  }
  stages {
    stage('Prepare/Checkout') { // for display purposes
      steps {
        script {
          // load utility function
          def rootDir = pwd()
          utils = load "${rootDir}/jenkins/groovy/Utils.groovy"
          // checkout repos
          utils.SetupRepos(env.VIDEO_INFRA_BRANCH)

          // setup OCI credentials
          utils.SetupOCI()
        }
      }
    }
    stage('Check Existing') {
      steps {
        script {
          if (env.IMAGE_TYPE == "") {
            error("No image type specified, failing")
          }
          dir('infra-provisioning') {
            skipCheck = utils.CheckSkipBuild(env.IMAGE_TYPE, env.ENVIRONMENT, (params.FORCE_BUILD_IMAGE ? 'true' : 'false'))
          }          
        }
      }
    }
    stage('Build Image') {
      when { // only run if image needs to be built
        expression {skipCheck == false}
      }
      steps {
        dir('infra-provisioning') {
          script {
            lock("image-build-${env.IMAGE_TYPE}") {
              utils.SetupAnsible()
              withCredentials([
                  sshUserPrivateKey(credentialsId: 'ssh-ubuntu', keyFileVariable: 'CONNECTION_SSH_PRIVATE_KEY_FILE', usernameVariable: 'SSH_USERNAME')
              ]) {
                  echo "Oracle ${env.IMAGE_TYPE} Image Creation"
                  utils.CreateImageOracle(env.IMAGE_TYPE)
              }
            }
          }
        }
      }
    }
    stage('Replicate Image') {
        when { // only run if image needs to be built
            expression {skipCheck == false}
        }
        steps {
            script {
                echo "Oracle ${env.IMAGE_TYPE} Image Replication"
                utils.ReplicateImageOracle(env.IMAGE_TYPE)
            }
        }
    }
  }
}
