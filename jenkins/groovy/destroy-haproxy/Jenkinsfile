def utils

pipeline {
    agent any
    options {
        timestamps()
        ansiColor('xterm')
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
    }
    stages {
        // output stage, shows off our input parameters
        stage ("setup") {
            steps {
                echo 'Jibri Release'
                echo "JIBRI VERSION ${env.JIBRI_VERSION}"
                script {
                    // load utility function
                    def rootDir = pwd()
                    utils = load "${rootDir}/jenkins/groovy/Utils.groovy"
                    // checkout repos
                    utils.SetupRepos(env.VIDEO_INFRA_BRANCH)

                    // setup OCI credentials
                    utils.SetupOCI()
                }
            }
        }
        stage ("destroy haproxy") {
            steps {
                script {
                  lock("haproxy-state-${env.ENVIRONMENT}") {
                    echo 'haproxy destruction beginning'
                    dir('infra-provisioning') {
                        withCredentials([
                            string(credentialsId: 'oci-jenkins-terraform-aws-secret', variable: 'AWS_SECRET_ACCESS_KEY'),
                            string(credentialsId: 'oci-jenkins-terraform-aws-id', variable: 'AWS_ACCESS_KEY_ID')
                        ]) {
                          sshagent(credentials: ['ssh-ubuntu']) {
                            sh '''#!/bin/bash
                            export ANSIBLE_FORCE_COLOR=True
                            terraform/haproxy-shards/destroy-haproxy-stack-oracle.sh ubuntu'''
                          }
                        }
                    }
                  }
                }
            }
        }
    }
}
