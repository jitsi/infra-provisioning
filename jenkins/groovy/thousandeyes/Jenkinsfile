def utils
pipeline {
  agent any
  options {
      ansiColor('xterm')
      timestamps()
      buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
  }
  stages {
    stage('Prepare/Checkout') { // for display purposes
      steps {
        script {
          // load utility function
          def rootDir = pwd()
          utils = load "${rootDir}/jenkins/groovy/Utils.groovy"
          // checkout repos
          utils.SetupRepos(env.VIDEO_INFRA_BRANCH)

          if (env.CLOUD_PROVIDER == 'oracle') {
            // setup OCI credentials
            utils.SetupOCI()
          }
        }
      }
    }
    stage('Provision') {
      steps {
        // Run the cloud provisioning
        dir('infra-provisioning') {
          script {
            if (env.CLOUD_PROVIDER == 'oracle') {
                withCredentials([
                    string(credentialsId: 'oci-jenkins-terraform-aws-secret', variable: 'AWS_SECRET_ACCESS_KEY'),
                    string(credentialsId: 'oci-jenkins-terraform-aws-id', variable: 'AWS_ACCESS_KEY_ID'),
                    sshUserPrivateKey(credentialsId: 'ssh-ubuntu', keyFileVariable: 'USER_PRIVATE_KEY_PATH', usernameVariable: 'SSH_USERNAME')
                ]) {
                    utils.SetupSSH()
                    sh '''#!/bin/bash
                    export USER_PUBLIC_KEY_PATH=~/.ssh/ssh_key.pub
                    export ORACLE_GIT_BRANCH=$RELEASE_BRANCH
                    terraform/thousandeyes-oracle/create-thousandeyes-stack-oracle.sh $SSH_USERNAME'''
                }
            } else {
              withCredentials([
                string(credentialsId: 'jenkins-aws-secret', variable: 'AWS_SECRET_ACCESS_KEY'),
                string(credentialsId: 'jenkins-aws-id', variable: 'AWS_ACCESS_KEY_ID')
              ]) {
                sh 'scripts/create-thousandeyes-stack.sh'
              }
            }
          }
        }
      }
    }
  }
}