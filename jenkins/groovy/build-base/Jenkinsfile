def replicateImageOracle() {
    sh(
        script: """#!/bin/bash
        export FORCE_BUILD_IMAGE=true
        # copy new image to root tenancy
        export DEST_COMPARTMENT_USE_TENANCY="true"
        scripts/replicate-image-oracle.sh
        exit \$?"""
    )
}
def setupOCI() {
  withCredentials([
    file(credentialsId: 'oci-jenkins-config', variable: 'OCI_CLI_CONFIG_FILE'),
    file(credentialsId: 'oci-jenkins-pem', variable: 'OCI_CLI_KEY_FILE')
  ]) {
      sh 'rm -rf ~/.oci'
      sh 'mkdir -p ~/.oci'
      sh 'cp "$OCI_CLI_CONFIG_FILE" ~/.oci/config'
      sh 'cp "$OCI_CLI_KEY_FILE" ~/.oci/private-key.pem'
  }
}
def setupAnsible() {
    sh 'echo "$ANSIBLE_VAULT_PASSWORD_PATH" > ./.vault-password.txt'
}

def setupRepos() {
  sshagent (credentials: ['video-infra']) {
      def scmUrl = scm.getUserRemoteConfigs()[0].getUrl()
      dir('infra-provisioning') {
          git branch: env.VIDEO_INFRA_BRANCH, url: scmUrl, credentialsId: 'video-infra'
      }
      dir('infra-configuration') {
          checkout([$class: 'GitSCM', branches: [[name: "origin/${VIDEO_INFRA_BRANCH}"]], extensions: [[$class: 'SubmoduleOption', disableSubmodules: false, parentCredentials: false, recursiveSubmodules: true, reference: '', trackingSubmodules: false]], userRemoteConfigs: [[credentialsId: 'video-infra', url: env.INFRA_CONFIGURATION_REPO]]])
          withCredentials([
            string(credentialsId: 'ansible-vault-password', variable: 'ANSIBLE_VAULT_PASSWORD_PATH'),
          ]) {
            setupAnsible()
          }
      }
      dir('infra-customization') {
          git branch: env.VIDEO_INFRA_BRANCH, url: env.INFRA_CUSTOMIZATIONS_REPO, credentialsId: 'video-infra'
      }
      sh 'cp -a infra-customization/* infra-configuration'
      sh 'cp -a infra-customization/* infra-provisioning'
      sh 'rm -rf test-results'
      sh 'mkdir test-results'
  }
}

def utils
def skipCheck = false

pipeline {
  agent any
  options {
      ansiColor('xterm')
      timestamps()
      buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
  }
  stages {
    stage('Prepare/Checkout') { // for display purposes
      steps {
        script {
          def rootDir = pwd()
          utils = load "${rootDir}/jenkins/groovy/Utils.groovy"

          setupRepos()

          if (env.CLOUD_PROVIDER == 'oracle') {
            setupOCI()
          }

        }
      }
    }
    stage('Check Existing') {
      when {
        expression {env.CLOUD_PROVIDER == 'oracle'}
      }
      steps {
        script {
          dir('infra-provisioning') {
            skipCheck = utils.CheckSkipBuild(env.IMAGE_TYPE, env.ENVIRONMENT)
          }          
        }
      }
    }
    stage('Build Image') {
      when {
        expression {skipCheck == false}
      }
      steps {
        dir('infra-provisioning') {
          script {
            if (env.CLOUD_PROVIDER == 'oracle') {
              withCredentials([
                sshUserPrivateKey(credentialsId: 'ssh-ubuntu', keyFileVariable: 'CONNECTION_SSH_PRIVATE_KEY_FILE', usernameVariable: 'SSH_USERNAME')
              ]) {
                sh 'scripts/build-jammy-base-oracle.sh ubuntu'
              }
            } else {
                sh 'scripts/build-base-image.sh ubuntu'
            }
          }
        }
      }
      // Run the cloud provisioning
    }
    stage('Replicate Image') {
        when {
          allOf {
            expression {skipCheck == false}
            expression {env.CLOUD_PROVIDER == 'oracle'}
          }
        }
        steps {
            script {
                if (skipCheck == false) {
                    echo 'Oracle Image Replication'
                    replicateImageOracle()
                } else {
                    echo 'Skipping image replication, already exists'
                }
            }
        }
    }
  }
}
