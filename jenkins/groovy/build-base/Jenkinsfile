
def utils
def skipCheck = false

pipeline {
  agent any
  options {
      ansiColor('xterm')
      timestamps()
      buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
  }
  stages {
    stage('Prepare/Checkout') { // for display purposes
      steps {
        script {
          // load utility function
          def rootDir = pwd()
          utils = load "${rootDir}/jenkins/groovy/Utils.groovy"
          // checkout repos
          utils.SetupRepos(env.VIDEO_INFRA_BRANCH)

          // setup OCI credentials
          if (env.CLOUD_PROVIDER == 'oracle') {
            utils.SetupOCI()
          }

          // clean and create test-results subdir
          sh 'rm -rf test-results'
          sh 'mkdir test-results'
        }
      }
    }
    stage('Check Existing') {
      when { // only support oracle check build for now
        expression {env.CLOUD_PROVIDER == 'oracle'}
      }
      steps {
        script {
          dir('infra-provisioning') {
            skipCheck = utils.CheckSkipBuild(env.IMAGE_TYPE, env.ENVIRONMENT)
          }          
        }
      }
    }
    stage('Build Image') {
      when { // only run if image needs to be built
        expression {skipCheck == false}
      }
      steps {
        dir('infra-provisioning') {
          script {
            if (env.CLOUD_PROVIDER == 'oracle') {
              withCredentials([
                sshUserPrivateKey(credentialsId: 'ssh-ubuntu', keyFileVariable: 'CONNECTION_SSH_PRIVATE_KEY_FILE', usernameVariable: 'SSH_USERNAME')
              ]) {
                sh 'scripts/build-jammy-base-oracle.sh ubuntu'
              }
            } else {
                sh 'scripts/build-base-image.sh ubuntu'
            }
          }
        }
      }
      // Run the cloud provisioning
    }
    stage('Replicate Image') {
        when {
          allOf {
            expression {skipCheck == false}
            expression {env.CLOUD_PROVIDER == 'oracle'}
          }
        }
        steps {
            script {
                if (skipCheck == false) {
                    echo 'Oracle Image Replication'
                    utils.ReplicateImageOracle()
                } else {
                    echo 'Skipping image replication, already exists'
                }
            }
        }
    }
  }
}
