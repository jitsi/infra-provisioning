// upgrade a single JVB pool
def utils
pipeline {
  agent any
  options {
      ansiColor('xterm')
      timestamps()
      buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
  }
  stages {
    stage ("setup") {
        steps {
            echo 'JVB Release Begin'
            echo "JVB VERSION ${env.JVB_VERSION}"
            echo "SHARD ${env.SHARD}"
        }
    }
    stage('Prepare/Checkout') { // for display purposes
      steps {
        script {
          // load utility function
          def rootDir = pwd()
          utils = load "${rootDir}/jenkins/groovy/Utils.groovy"
          // checkout repos
          utils.SetupRepos(env.VIDEO_INFRA_BRANCH)

          // setup OCI credentials
          utils.SetupOCI()
        }
      }
    }
    stage('Provision') {
      steps {
        dir('infra-provisioning') {
          script {
            withCredentials([
                string(credentialsId: 'oci-jenkins-terraform-aws-secret', variable: 'AWS_SECRET_ACCESS_KEY'),
                string(credentialsId: 'oci-jenkins-terraform-aws-id', variable: 'AWS_ACCESS_KEY_ID'),
                sshUserPrivateKey(credentialsId: 'ssh-ubuntu', keyFileVariable: 'USER_PRIVATE_KEY_PATH',usernameVariable: 'SSH_USERNAME'),
                string(credentialsId: 'asap-jwt-kid-dev', variable: 'ASAP_JWT_KID_DEV'),
                string(credentialsId: 'asap-jwt-kid-prod', variable: 'ASAP_JWT_KID_PROD'),
                file(credentialsId: 'asap-jwt-key-dev', variable: 'ASAP_JWT_KEY_DEV'),
                file(credentialsId: 'asap-jwt-key-prod', variable: 'ASAP_JWT_KEY_PROD')
            ]) {
                utils.SetupAnsible()
                utils.SetupSSH()
                sh(script: """
                    export USER_PUBLIC_KEY_PATH="\$(realpath ~/.ssh/ssh_key.pub)"
                    export ORACLE_GIT_BRANCH=${env.RELEASE_BRANCH}
                    scripts/create-or-rotate-custom-jvb-oracle.sh
                """)
            }
          }
        }
      }
    }
  }
}
