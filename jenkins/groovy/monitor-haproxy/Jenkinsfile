def haproxyStatus() {
    echo 'run haproxy status'
    sh(
        script: """#!/bin/bash
        export LOG_PATH="\$(realpath ../haproxy-status/stick-table-fixes.json.log)"
        scripts/haproxy-status.sh ubuntu"""
    )
}

def putAllLogResultsInBucket() {
    sh(
        script: "oci os object bulk-upload --bucket-name dump-logs-ops-prod --prefix monitor-haproxy/\${ENVIRONMENT}/\$(date +%F_%T)/ --src-dir haproxy-status/\${ENVIRONMENT} --region us-phoenix-1"
    )
}

def putStickTableFixesInBucket() {
    sh(
        script: """#!/bin/bash
        STICK_TABLE_FIXES="haproxy-status/\${ENVIRONMENT}/stick-table-fixes.json"
        if [ -e \$STICK_TABLE_FIXES ]; then
          oci os object put --bucket-name dump-logs-ops-prod --name monitor-haproxy/\${ENVIRONMENT}/\$(date +%F_%T)_stick-table-fixes.json --file \$STICK_TABLE_FIXES --region us-phoenix-1
        else
          echo "no stick table fixes to put in bucket"
        fi
        """
    )
}

def utils
pipeline {
    agent any
    options {
        timestamps()
        ansiColor('xterm')
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '50'))
    }
    stages {
        // output stage, shows off our input parameters
        stage ("setup") {
            steps {
                script {
                    // load utility function
                    def rootDir = pwd()
                    utils = load "${rootDir}/jenkins/groovy/Utils.groovy"
                    // checkout repos
                    utils.SetupRepos(env.VIDEO_INFRA_BRANCH)
                    // setup OCI credentials
                    utils.SetupOCI()
                    sh 'mkdir -p test-results'
                    sh 'mkdir -p haproxy-status'
                }
            }
        }
        stage ("monitor haproxies") {
            steps {
                script {
                    echo 'setting up ansible'
                    dir('infra-configuration') {
                        withCredentials([
                            string(credentialsId: 'ansible-vault-password', variable: 'ANSIBLE_VAULT_PASSWORD_PATH')
                        ]) {
                            utils.SetupAnsible()
                        }
                    }
                    try {
                        timeout(time: 20, unit: 'MINUTES') {
                            dir('infra-provisioning') {
                                lock("haproxy-state-${env.ENVIRONMENT}") {
                                    withCredentials([
                                        file(credentialsId: 'oci-jenkins-config', variable: 'OCI_CLI_CONFIG_FILE'),
                                        file(credentialsId: 'oci-jenkins-pem', variable: 'OCI_CLI_KEY_FILE'),
                                        string(credentialsId: 'jenkins-aws-secret', variable: 'AWS_SECRET_ACCESS_KEY'),
                                        string(credentialsId: 'jenkins-aws-id', variable: 'AWS_ACCESS_KEY_ID')
                                    ]) {
                                        sshagent (credentials: ['ssh-ubuntu']) {
                                            haproxyStatus()
                                        }
                                    }
                                }
                            }
                        }
                    } catch (err) {
                        println err
                        echo 'Timeout exceeded.'
                        error 'haproxyStatus() timed out after 20 minutes'
                    }
                }
            }
        }
    }
    post {
        always {
            archiveArtifacts artifacts: 'haproxy-status/**', allowEmptyArchive: false
            putStickTableFixesInBucket()
            cleanWs() // clean up
        }
    }
}
