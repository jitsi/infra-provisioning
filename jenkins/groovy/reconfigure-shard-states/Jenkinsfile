def reconfigureShardStates() {
    sh(
        script: """#!/bin/bash
        export ANSIBLE_FORCE_COLOR=True
        scripts/set-signal-shard-states.sh ubuntu
        exit \$?"""
    )
}
def utils
pipeline {
    agent any
    options {
        ansiColor('xterm')
        timestamps()
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
    }
    stages {
        // output stage, shows off our input parameters
        stage ("setup") {
            steps {
                script {
                    // load utility function
                    def rootDir = pwd()
                    utils = load "${rootDir}/jenkins/groovy/Utils.groovy"
                    // checkout repos
                    utils.SetupRepos(env.VIDEO_INFRA_BRANCH)

                    // setup OCI credentials
                    utils.SetupOCI()
                }
            }
        }
        stage ("shard state") {
            steps {
                script {
                    echo 'set state on shards'
                    dir('infra-provisioning') {
                        withCredentials([
                            string(credentialsId: 'jenkins-aws-secret', variable: 'AWS_SECRET_ACCESS_KEY'),
                            string(credentialsId: 'jenkins-aws-id', variable: 'AWS_ACCESS_KEY_ID')                            
                        ]) {
                          sshagent (credentials: ['ssh-ubuntu']) {
                            reconfigureShardStates()
                          }
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            // Clean up afterwards
            cleanWs()
        }
    }
}
