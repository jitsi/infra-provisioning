def cloud_shards(shard_environment, cloud) {
    shards = sh(
        returnStdout: true,
        script: """
            export ENVIRONMENT="${shard_environment}"
            export CLOUD_NAME="${cloud}"
            scripts/cloud_shards.sh ubuntu
        """).trim().split(' ');
    return shards
}

def cloud_pools(shard_environment, cloud) {
    shards = sh(
        returnStdout: true,
        script: """
            export ENVIRONMENT="${shard_environment}"
            export CLOUD_NAME="${cloud}"
            scripts/list-jvb-pools.sh ubuntu
        """).trim().split(' ');
    return shards
}

def checkSkipShardJVBs(hcv_environment) {
    def ret = 'false';

    def skipShardJVBs = sh(
       returnStdout: true,
       script: """#!/bin/bash
. ./sites/${hcv_environment}/stack-env.sh
echo \$SKIP_SHARD_JVBS"""
    ).trim();

    if (skipShardJVBs.length() > 0) {
        ret = skipShardJVBs;
    }

    return ret;
}

// global var to track git branch from env or new tags
def git_branch

// use incoming branch/tag or tag repo with new tag based on build ID
// either way set it into git_branch variable to use later
def tagRelease(jvb_release,env_branch) {
    if (env_branch) {
        git_branch = env_branch
        // do nothing here, since git branch is specified
    } else {
        git_branch = 'jvb-release-'+jvb_release
        env.RELEASE_BRANCH = git_branch
        sh 'git tag ' + git_branch
        sh 'git push origin '+git_branch
    }
    return git_branch
}

// trigger build JVB image oracle job with appropriate parameters
def buildJvbImage(jvbVersion,environment,clouds,force_build_jvb_image,video_infra_branch) {
    def buildImage = build job: 'build-image-oracle',parameters: [
        [$class: 'StringParameterValue', name: 'IMAGE_TYPE', value: 'JVB'],
        [$class: 'StringParameterValue', name: 'JVB_VERSION', value: jvbVersion],
        [$class: 'StringParameterValue', name: 'ENVIRONMENT', value: environment],
        [$class: 'StringParameterValue', name: 'CLOUDS', value: clouds],
        [$class: 'BooleanParameterValue', name: 'FORCE_BUILD_IMAGE', value: force_build_jvb_image],
        [$class: 'StringParameterValue', name: 'VIDEO_INFRA_BRANCH', value: video_infra_branch]
    ]

    return buildImage
}

// trigger create shard job with appopriate parameters
def upgradeJVBPool(shard_environment,cloud_name,cloud_provider,shard,release_number,jvb_release_number,gitBranch,jvbVersion,shape,ocpus,memory_in_gbs,video_infra_branch) {
    def createShard = build job: 'upgrade-jvb-pool',parameters: [
        [$class: 'StringParameterValue', name: 'ENVIRONMENT', value: shard_environment],
        [$class: 'StringParameterValue', name: 'CLOUD_NAME', value: cloud_name],
        [$class: 'StringParameterValue', name: 'CLOUD_PROVIDER', value: cloud_provider],
        [$class: 'StringParameterValue', name: 'SHARD', value: shard],
        [$class: 'StringParameterValue', name: 'JVB_VERSION', value: jvbVersion],
        [$class: 'StringParameterValue', name: 'RELEASE_NUMBER', value: release_number],
        [$class: 'StringParameterValue', name: 'JVB_RELEASE_NUMBER', value: jvb_release_number],
        [$class: 'StringParameterValue', name: 'RELEASE_BRANCH', value: gitBranch],
        [$class: 'StringParameterValue', name: 'SHAPE', value: shape],
        [$class: 'StringParameterValue', name: 'OCPUS', value: ocpus],
        [$class: 'StringParameterValue', name: 'MEMORY_IN_GBS', value: memory_in_gbs],
        [$class: 'StringParameterValue', name: 'VIDEO_INFRA_BRANCH', value: video_infra_branch]
    ]

    return createShard
}

def skipShardJVBs
def utils
pipeline {
  agent any
  options {
      ansiColor('xterm')
      timestamps()
      buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
  }
  stages {
    // output stage, shows off our input parameters
    stage ("setup") {
        steps {
            echo 'JVB Release Begin'
            echo "JVB VERSION ${env.JVB_VERSION}"
        }
    }
    stage('Prepare/Checkout') { // for display purposes
      steps {
        script {
          // load utility function
          def rootDir = pwd()
          utils = load "${rootDir}/jenkins/groovy/Utils.groovy"
          // checkout repos
          utils.SetupRepos(env.VIDEO_INFRA_BRANCH)

          // setup OCI credentials
          utils.SetupOCI()
        }
      }
    }
    stage("load flags") {
        steps {
            script {
                dir("infra-provisioning") {
                    skipShardJVBs = checkSkipShardJVBs(env.ENVIRONMENT)
                    echo skipShardJVBs
                }
            }
        }
    }
    stage("build JVB image in Oracle") {
        when {
            expression {env.CLOUD_PROVIDER == 'oracle'}
        }
        steps {
            script {
                buildJvbImage(env.JVB_VERSION,
                        env.ENVIRONMENT,
                        env.CLOUDS,
                        env.FORCE_BUILD_IMAGE,
                        env.VIDEO_INFRA_BRANCH
                        )
            }
        }
    }
    // tag the new release or load git_branch from input parameters
    stage("tag release") {
        steps {
            script {
                // use incoming branch/tag or tag repo with new tag based on build ID
                // either way set it into git_branch variable to use later
                git_branch = utils.TagRelease('jvb-release',env.BUILD_ID, env.RELEASE_BRANCH)
                env.RELEASE_BRANCH = git_branch
            }
        }
    }
    // create new shards for the release
    stage("upgrade JVB pools") {
        steps {
          dir('infra-provisioning') {
            script {
                withCredentials([
                    string(credentialsId: 'asap-jwt-kid-dev', variable: 'ASAP_JWT_KID_DEV'),
                    string(credentialsId: 'asap-jwt-kid-prod', variable: 'ASAP_JWT_KID_PROD'),
                    file(credentialsId: 'asap-jwt-key-dev', variable: 'ASAP_JWT_KEY_DEV'),
                    file(credentialsId: 'asap-jwt-key-prod', variable: 'ASAP_JWT_KEY_PROD')
                ]) {
                    sshagent (credentials: ['ssh-ubuntu']) {
                        echo "Upgrade JVB pools in ${env.ENVIRONMENT} clouds ${env.CLOUDS}";
                        def cloud_list = utils.SplitClouds(env.ENVIRONMENT,env.CLOUDS);
                        echo "cloud list ${cloud_list}";
                        def branches = [:]
                        for(i = 0; i < cloud_list.size(); i++) {
                          def curr = i
                          if (skipShardJVBs == 'false') {
                            def shards = cloud_shards(env.ENVIRONMENT, cloud_list[curr])
                            for(s = 0; s < shards.size(); s++) {
                                def scurr=s
                                if(shards[scurr]) {
                                    echo "pipeline branch ${curr} for shard ${shards[scurr]} cloud ${cloud_list[curr]}";
                                    branches["Build ${shards[scurr]}"] = {
                                        upgradeJVBPool(env.ENVIRONMENT,
                                            cloud_list[curr],
                                            env.CLOUD_PROVIDER,
                                            shards[scurr],
                                            env.RELEASE_NUMBER,
                                            env.BUILD_ID,
                                            git_branch,
                                            env.JVB_VERSION,
                                            env.SHAPE,
                                            env.OCPUS,
                                            env.MEMORY_IN_GBS,
                                            env.VIDEO_INFRA_BRANCH
                                        )
                                    }
                                }
                            }
                          }
                            def pools = cloud_pools(env.ENVIRONMENT, cloud_list[curr])
                            for(p = 0; p < pools.size(); p++) {
                                def pcurr=p
                                if(pools[pcurr]) {
                                    echo "pipeline branch ${pcurr} for pool ${pools[pcurr]} cloud ${cloud_list[curr]}";
                                    branches["Build ${pools[pcurr]}"] = {
                                        upgradeJVBPool(env.ENVIRONMENT,
                                            cloud_list[curr],
                                            env.CLOUD_PROVIDER,
                                            pools[pcurr],
                                            env.RELEASE_NUMBER,
                                            env.BUILD_ID,
                                            git_branch,
                                            env.JVB_VERSION,
                                            env.SHAPE,
                                            env.OCPUS,
                                            env.MEMORY_IN_GBS,
                                            env.VIDEO_INFRA_BRANCH
                                        )
                                    }
                                }
                            }
                        }
                        // branch out here, run all create shard jobs at once
                        // only succeed if all branches succeed
                        parallel branches
                    }
                }
            }
          }
        }
    }
  }
}