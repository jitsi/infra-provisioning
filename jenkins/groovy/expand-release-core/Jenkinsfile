// generates unique new shard numbers for environment based on existing shards currently deployed
def expand_release() {
    sh(
        script: 'scripts/expand-release.sh ubuntu'
    )
    awsShardsByCloud = readJSON file: 'add-shards-by-cloud-aws.json'
    oracleShardsByCloud = readJSON file: 'add-shards-by-cloud-oracle.json'


    return [awsShardsByCloud: awsShardsByCloud, oracleShardsByCloud: oracleShardsByCloud];
}

// global var to track whether parallel tasks were started or not
def shards_created = false;

// trigger create shard job with appopriate parameters
def createShard(shard_environment,cloud_name,core_cloud_provider,cloud_provider,shard_count,shard_numbers,release_number,gitBranch,jvbVersion,signalVersion,video_infra_branch) {
    def createShard = build job: 'provision-shard',parameters: [
        [$class: 'StringParameterValue', name: 'ENVIRONMENT', value: shard_environment],
        [$class: 'StringParameterValue', name: 'CLOUD_NAME', value: cloud_name],
        [$class: 'StringParameterValue', name: 'CLOUD_PROVIDER', value: cloud_provider],
        [$class: 'StringParameterValue', name: 'CORE_CLOUD_PROVIDER', value: core_cloud_provider],
        [$class: 'StringParameterValue', name: 'SHARD_COUNT', value: shard_count],
        [$class: 'StringParameterValue', name: 'SHARD_NUMBERS', value: shard_numbers],
        [$class: 'StringParameterValue', name: 'SIGNAL_VERSION', value: signalVersion],
        [$class: 'StringParameterValue', name: 'JVB_VERSION', value: jvbVersion],
        [$class: 'StringParameterValue', name: 'RELEASE_NUMBER', value: release_number],
        [$class: 'StringParameterValue', name: 'RELEASE_BRANCH', value: gitBranch],
        [$class: 'StringParameterValue', name: 'VIDEO_INFRA_BRANCH', value: video_infra_branch]
    ]

    return createShard
}

def utils

pipeline {				//indicate the job is written in Declarative Pipeline
    agent any				//agent specifies where the pipeline will execute. 
    options {
        ansiColor('xterm')
        timestamps()
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
    }
    stages {
        stage('Prepare/Checkout') { // for display purposes
            steps {
                script {
                    // load utility function
                    def rootDir = pwd()
                    utils = load "${rootDir}/jenkins/groovy/Utils.groovy"
                    // checkout repos
                    utils.SetupRepos(env.VIDEO_INFRA_BRANCH)

                    // setup OCI credentials
                    utils.SetupOCI()
                }
            }
        }
        // output stage, shows off our input parameters
        stage ("setup") {
            steps {
                echo 'Jitsi Release Expansion Starting'
                echo "JVB VERSION ${env.JVB_VERSION}"
                echo "SIGNAL VERSION ${env.SIGNAL_VERSION}"
                echo "CLOUDS ${env.CLOUDS}"
                echo "RELEASE NUMBER ${env.RELEASE_NUMBER}"
                echo "GIT BRANCH ${env.RELEASE_BRANCH}"
            }
        }
        stage ("load flags") {
            steps {
                script {
                    dir('infra-provisioning') {
                        useHAProxyConsulTemplate = utils.GetAnsibleVar(env.ENVIRONMENT, "haproxy_enable_consul_template")
                        echo useHAProxyConsulTemplate
                    }
                }
            }
        }
        stage("create shards") {
            steps {
                script {
                    withCredentials([
                            string(credentialsId: 'jenkins-aws-secret', variable: 'AWS_SECRET_ACCESS_KEY'),
                            string(credentialsId: 'jenkins-aws-id', variable: 'AWS_ACCESS_KEY_ID')
                    ]) {
                      sshagent (credentials: ['ssh-ubuntu']) {
                        dir('infra-provisioning') {
                            echo "Create shards in ${env.ENVIRONMENT} clouds ${env.CLOUDS}";
                            def cloud_list = utils.SplitClouds(env.ENVIRONMENT,env.CLOUDS);
                            def shards_by_cloud;
                            def aws_shards_by_cloud;
                            def oracle_shards_by_cloud;
                            echo "cloud list ${cloud_list}";
                            shards_by_cloud = expand_release();
                            oracle_shards_by_cloud = shards_by_cloud.oracleShardsByCloud
                            aws_shards_by_cloud = shards_by_cloud.awsShardsByCloud
                            def branches = [:]
                            for(i = 0; i < cloud_list.size(); i++) {
                                def curr = i
                                echo "pipeline branch ${curr} for shard ${cloud_list[curr]}";
                                if (aws_shards_by_cloud.containsKey(cloud_list[curr])) {
                                    shards_created = true;
                                    def shard_count = aws_shards_by_cloud[cloud_list[curr]].split(' ').size().toString()
                                    echo "createShard ${env.ENVIRONMENT} ${cloud_list[curr]} ${shard_count} ${aws_shards_by_cloud[cloud_list[curr]]} ${env.RELEASE_NUMBER} ${env.RELEASE_BRANCH} ${env.JVB_VERSION} ${env.SIGNAL_VERSION}"
                                    branches["aws ${cloud_list[curr]}"] = {
                                        createShard(env.ENVIRONMENT,
                                            cloud_list[curr],
                                            "aws",
                                            "aws",
                                            shard_count,
                                            aws_shards_by_cloud[cloud_list[curr]],
                                            env.RELEASE_NUMBER,
                                            env.RELEASE_BRANCH,
                                            env.JVB_VERSION,
                                            env.SIGNAL_VERSION,
                                            env.VIDEO_INFRA_BRANCH
                                        ) 
                                    }
                                }
                            }
                            for(i = 0; i < cloud_list.size(); i++) {
                                def curr = i
                                echo "pipeline branch ${curr} for shard ${cloud_list[curr]}";
                                if (oracle_shards_by_cloud.containsKey(cloud_list[curr])) {
                                    shards_created = true;
                                    def oracle_shards = oracle_shards_by_cloud[cloud_list[curr]].split(' ')
                                    def shard_count = oracle_shards.size();
                                    echo "createShard ${env.ENVIRONMENT} ${cloud_list[curr]} ${shard_count.toString()} ${oracle_shards_by_cloud[cloud_list[curr]]} ${env.RELEASE_NUMBER} ${env.RELEASE_BRANCH} ${env.JVB_VERSION} ${env.SIGNAL_VERSION}"
                                    for(j = 0; j < shard_count; j++) {
                                        def s = j
                                        branches["oracle ${cloud_list[curr]} ${j}"] = {
                                            createShard(env.ENVIRONMENT,
                                                cloud_list[curr],
                                                env.CORE_CLOUD_PROVIDER,
                                                "oracle",
                                                '1',
                                                oracle_shards[s],
                                                env.RELEASE_NUMBER,
                                                env.RELEASE_BRANCH,
                                                env.JVB_VERSION,
                                                env.SIGNAL_VERSION,
                                                env.VIDEO_INFRA_BRANCH
                                            ) 
                                        }
                                    }
                                }
                            }
                            // branch out here, run all create shard jobs at once
                            // only succeed if all branches succeed
                            parallel branches                    
                        }
                      }
                    }
                }
            }
        }
        stage("Trigger autoscaler reconfiguration") {
            steps {
                build job: 'reconfigure-autoscaler-environment',wait: true,parameters: [
                    [$class: 'StringParameterValue', name: 'ENVIRONMENT', value: env.ENVIRONMENT],
                    [$class: 'StringParameterValue', name: 'VIDEO_INFRA_BRANCH', value: env.VIDEO_INFRA_BRANCH]
                ]
            }
        }
        // trigger rotation of load balancers to discover new shards
        stage ("rotate load balancers") {
            steps {
                when {
                    expression { useHAProxyConsulTemplate != 'true' }
                }
                script {
                    if (shards_created) {
                        utils.ReconfigureHAProxy(env.ENVIRONMENT, env.VIDEO_INFRA_BRANCH)
                    }
                }
            }
        }
    }
}