def setupOCI() {
    sh 'rm -rf ~/.oci'
    sh 'mkdir -p ~/.oci'
    sh 'cp "$OCI_CLI_CONFIG_FILE" ~/.oci/config'
    sh 'cp "$OCI_CLI_KEY_FILE" ~/.oci/private-key.pem'
}

def setupAnsible() {
    sh 'echo "$ANSIBLE_VAULT_PASSWORD_PATH" > ./.vault-password.txt'
}

def reloadHaproxy() {
    sh(
        script: """#!/bin/bash
        export LOG_DEST="../../test-results"
        scripts/reload-haproxy.sh ubuntu
        exit \$?"""
    )
}

pipeline {
    agent any
    stages {
        // output stage, shows off our input parameters
        stage ("setup") {
            steps {
              timestamps {
                script {
                    def scmUrl = scm.getUserRemoteConfigs()[0].getUrl()
                    dir('infra-configuration') {
                        checkout([$class: 'GitSCM', branches: [[name: "origin/${VIDEO_INFRA_BRANCH}"]], extensions: [[$class: 'SubmoduleOption', disableSubmodules: false, parentCredentials: false, recursiveSubmodules: true, reference: '', trackingSubmodules: false]], userRemoteConfigs: [[credentialsId: 'video-infra', url: env.INFRA_CONFIGURATION_REPO]]])
                    }
                    dir('infra-customization') {
                        git branch: env.VIDEO_INFRA_BRANCH, url: env.INFRA_CUSTOMIZATIONS_REPO, credentialsId: 'video-infra'
                    }
                    dir('infra-provisioning') {
                        git branch: env.VIDEO_INFRA_BRANCH, url: scmUrl, credentialsId: 'video-infra'
                    }
                    sh 'mkdir -p test-results'
                    sh 'cp -a infra-customization/* infra-provisioning'
                    sh 'cp -a infra-customization/* infra-configuration'
                }
              }
            }
        }
        stage ("haproxy reload") {
            steps {
              timestamps {
                script {
                    echo 'haproxy reload'
                    dir('infra-configuration') {
                        withCredentials([
                            string(credentialsId: 'ansible-vault-password', variable: 'ANSIBLE_VAULT_PASSWORD_PATH')
                        ]) {
                            setupAnsible()
                        }
                    }
                    dir('infra-provisioning') {
                        withCredentials([
                            file(credentialsId: 'oci-jenkins-config', variable: 'OCI_CLI_CONFIG_FILE'),
                            file(credentialsId: 'oci-jenkins-pem', variable: 'OCI_CLI_KEY_FILE'),
                            string(credentialsId: 'jenkins-aws-secret', variable: 'AWS_SECRET_ACCESS_KEY'),
                            string(credentialsId: 'jenkins-aws-id', variable: 'AWS_ACCESS_KEY_ID')                            
                        ]) {
                          sshagent (credentials: ['ssh-ubuntu']) {
                            setupOCI()
                            reloadHaproxy()
                          }
                        }
                    }
                }
              }
            }
        }
    }
    post {
        always {
            archiveArtifacts artifacts: 'test-results/**.log'
            // Clean up afterwards
            cleanWs()
        }
    }
}
