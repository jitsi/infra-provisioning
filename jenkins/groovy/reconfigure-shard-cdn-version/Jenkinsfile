def setupOCI() {
    sh 'rm -rf ~/.oci'
    sh 'mkdir -p ~/.oci'
    sh 'cp "$OCI_CLI_CONFIG_FILE" ~/.oci/config'
    sh 'cp "$OCI_CLI_KEY_FILE" ~/.oci/private-key.pem'
}

def reconfigureShardCDNVersion() {
    sh(
        script: """#!/bin/bash
        scripts/set-shard-cdn-version.sh ubuntu
        exit \$?"""
    )
}

pipeline {
    agent any
    options {
        ansiColor('xterm')
        timestamps()
    }
    stages {
        // output stage, shows off our input parameters
        stage ("setup") {
            steps {
                script {
                    def scmUrl = scm.getUserRemoteConfigs()[0].getUrl()
                    dir('infra-customization') {
                        git branch: env.VIDEO_INFRA_BRANCH, url: env.INFRA_CUSTOMIZATIONS_REPO, credentialsId: 'video-infra'
                    }
                    dir('infra-provisioning') {
                        git branch: env.VIDEO_INFRA_BRANCH, url: scmUrl, credentialsId: 'video-infra'
                    }
                    sh 'cp -a infra-customization/* infra-provisioning'
                }
            }
        }
        stage ("reconfigure CDN") {
            steps {
                script {
                    echo 'reconfigure CDN'
                    dir('infra-provisioning') {
                        withCredentials([
                            file(credentialsId: 'oci-jenkins-config', variable: 'OCI_CLI_CONFIG_FILE'),
                            file(credentialsId: 'oci-jenkins-pem', variable: 'OCI_CLI_KEY_FILE'),
                            string(credentialsId: 'jenkins-aws-secret', variable: 'AWS_SECRET_ACCESS_KEY'),
                            string(credentialsId: 'jenkins-aws-id', variable: 'AWS_ACCESS_KEY_ID')                            
                        ]) {
                          sshagent (credentials: ['ssh-ubuntu']) {
                            setupOCI()
                            reconfigureShardCDNVersion()
                          }
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            // Clean up afterwards
            cleanWs()
        }
    }
}
